# Medical Imaging AI API Docker Compose
# Phase 5: Backend & API Design

version: '3.8'

services:
  # Main API Service
  medical-ai-api:
    build: .
    container_name: medical-ai-api
    ports:
      - "8000:8000"
    environment:
      - API_SECRET_KEY=your-secret-key-here
      - ENVIRONMENT=production
      - PYTHONPATH=/app
    volumes:
      - ./api_data:/app/api_data
      - ./logs:/app/logs
      - ./models:/app/models
      - ./training_results:/app/training_results
      - ./results:/app/results
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - medical-ai-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: medical-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - medical-ai-network

  # PostgreSQL for production database (optional)
  postgres:
    image: postgres:15-alpine
    container_name: medical-ai-postgres
    environment:
      - POSTGRES_DB=medical_ai
      - POSTGRES_USER=medical_ai_user
      - POSTGRES_PASSWORD=medical_ai_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - medical-ai-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: medical-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - medical-ai-api
    restart: unless-stopped
    networks:
      - medical-ai-network

volumes:
  redis_data:
  postgres_data:

networks:
  medical-ai-network:
    driver: bridge
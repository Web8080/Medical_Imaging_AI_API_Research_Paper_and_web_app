# Docker Compose configuration for production deployment
# This is a placeholder configuration for future production deployment

version: '3.8'

services:
  # API Server
  api:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile
    container_name: medical-imaging-api
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://user:password@postgres:5432/medical_imaging_api
      - REDIS_URL=redis://redis:6379
      - MODEL_PATH=/app/models
      - MAX_UPLOAD_SIZE=10MB
    volumes:
      - model_storage:/app/models
      - logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - medical-imaging-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # PostgreSQL Database
  postgres:
    image: postgres:13-alpine
    container_name: medical-imaging-postgres
    environment:
      - POSTGRES_DB=medical_imaging_api
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d medical_imaging_api"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - medical-imaging-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: medical-imaging-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - medical-imaging-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: medical-imaging-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - logs:/var/log/nginx
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - medical-imaging-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: medical-imaging-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - medical-imaging-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: medical-imaging-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - medical-imaging-network

  # ELK Stack - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: medical-imaging-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - medical-imaging-network

  # ELK Stack - Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    container_name: medical-imaging-logstash
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - medical-imaging-network

  # ELK Stack - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    container_name: medical-imaging-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - medical-imaging-network

  # Model Update Service
  model-updater:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile
    container_name: medical-imaging-model-updater
    environment:
      - ENVIRONMENT=production
      - MODEL_PATH=/app/models
    volumes:
      - model_storage:/app/models
    command: python scripts/update_models.py
    restart: "no"
    networks:
      - medical-imaging-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  model_storage:
    driver: local
  logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  medical-imaging-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

#!/usr/bin/env python3
"""
Test script for Medical Imaging AI API
Tests the API endpoints with sample data.
"""

import requests
import json
import time
from pathlib import Path
import numpy as np
from PIL import Image
import io

# API Configuration
API_BASE_URL = "http://localhost:8000"
API_TOKEN = "test_token"  # This will be generated by the security manager

def create_test_image(size=(28, 28), channels=1):
    """Create a test medical image."""
    if channels == 1:
        # Grayscale image
        image_array = np.random.randint(0, 255, size, dtype=np.uint8)
        image = Image.fromarray(image_array, mode='L')
    else:
        # RGB image
        image_array = np.random.randint(0, 255, (*size, channels), dtype=np.uint8)
        image = Image.fromarray(image_array, mode='RGB')
    
    return image

def test_health_endpoint():
    """Test the health check endpoint."""
    print("Testing health endpoint...")
    
    try:
        response = requests.get(f"{API_BASE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ Health check passed")
            print(f"Response: {response.json()}")
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Health check error: {str(e)}")

def test_analyze_endpoint():
    """Test the image analysis endpoint."""
    print("\nTesting analyze endpoint...")
    
    # Create test images for different model types
    test_cases = [
        {"model_type": "chest", "channels": 1, "filename": "chest_test.png"},
        {"model_type": "derma", "channels": 3, "filename": "derma_test.png"},
        {"model_type": "oct", "channels": 1, "filename": "oct_test.png"}
    ]
    
    for test_case in test_cases:
        print(f"\nTesting {test_case['model_type']} model...")
        
        # Create test image
        test_image = create_test_image(channels=test_case['channels'])
        
        # Convert to bytes
        img_buffer = io.BytesIO()
        test_image.save(img_buffer, format='PNG')
        img_buffer.seek(0)
        
        # Prepare request
        files = {
            'file': (test_case['filename'], img_buffer, 'image/png')
        }
        
        data = {
            'model_type': test_case['model_type'],
            'analysis_type': 'classification',
            'confidence_threshold': 0.5
        }
        
        headers = {
            'Authorization': f'Bearer {API_TOKEN}'
        }
        
        try:
            response = requests.post(
                f"{API_BASE_URL}/analyze",
                files=files,
                data=data,
                headers=headers
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ {test_case['model_type']} analysis successful")
                print(f"Request ID: {result['request_id']}")
                print(f"Confidence: {result['confidence']:.3f}")
                print(f"Processing time: {result['processing_time']:.3f}s")
                
                # Test getting result by ID
                test_get_result(result['request_id'])
                
            else:
                print(f"‚ùå {test_case['model_type']} analysis failed: {response.status_code}")
                print(f"Error: {response.text}")
                
        except Exception as e:
            print(f"‚ùå {test_case['model_type']} analysis error: {str(e)}")

def test_get_result(request_id):
    """Test getting result by request ID."""
    print(f"Testing get result for {request_id}...")
    
    headers = {
        'Authorization': f'Bearer {API_TOKEN}'
    }
    
    try:
        response = requests.get(
            f"{API_BASE_URL}/result/{request_id}",
            headers=headers
        )
        
        if response.status_code == 200:
            print("‚úÖ Get result successful")
        else:
            print(f"‚ùå Get result failed: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Get result error: {str(e)}")

def test_metrics_endpoint():
    """Test the metrics endpoint."""
    print("\nTesting metrics endpoint...")
    
    headers = {
        'Authorization': f'Bearer {API_TOKEN}'
    }
    
    try:
        response = requests.get(f"{API_BASE_URL}/metrics", headers=headers)
        
        if response.status_code == 200:
            metrics = response.json()
            print("‚úÖ Metrics endpoint successful")
            print(f"Total requests: {metrics['total_requests']}")
            print(f"Success rate: {metrics['successful_requests']}/{metrics['total_requests']}")
        else:
            print(f"‚ùå Metrics endpoint failed: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Metrics endpoint error: {str(e)}")

def test_models_endpoint():
    """Test the models endpoint."""
    print("\nTesting models endpoint...")
    
    headers = {
        'Authorization': f'Bearer {API_TOKEN}'
    }
    
    try:
        response = requests.get(f"{API_BASE_URL}/models", headers=headers)
        
        if response.status_code == 200:
            models = response.json()
            print("‚úÖ Models endpoint successful")
            print(f"Available models: {models['available_models']}")
        else:
            print(f"‚ùå Models endpoint failed: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Models endpoint error: {str(e)}")

def test_feedback_endpoint():
    """Test the feedback endpoint."""
    print("\nTesting feedback endpoint...")
    
    headers = {
        'Authorization': f'Bearer {API_TOKEN}'
    }
    
    feedback_data = {
        "accuracy": "good",
        "usefulness": "high",
        "comments": "Test feedback"
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/feedback",
            params={"request_id": "test_request_id"},
            json=feedback_data,
            headers=headers
        )
        
        if response.status_code == 200:
            print("‚úÖ Feedback endpoint successful")
        else:
            print(f"‚ùå Feedback endpoint failed: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Feedback endpoint error: {str(e)}")

def main():
    """Run all API tests."""
    print("üß™ Medical Imaging AI API Test Suite")
    print("=" * 50)
    
    # Wait for API to be ready
    print("Waiting for API to be ready...")
    time.sleep(2)
    
    # Run tests
    test_health_endpoint()
    test_analyze_endpoint()
    test_metrics_endpoint()
    test_models_endpoint()
    test_feedback_endpoint()
    
    print("\n" + "=" * 50)
    print("üèÅ Test suite completed!")

if __name__ == "__main__":
    main()
